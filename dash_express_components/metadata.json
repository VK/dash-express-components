{
  "src/lib/components/Configurator.react.js": {
    "description": "Configurator component",
    "displayName": "Configurator",
    "methods": [
      {
        "name": "fix_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_sub_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "config_dict",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_props",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "graphId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata the plotter selection is based on."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "Prop The resulting configuration of the plot."
      },
      "showFilter": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Filter panel",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showTransform": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Transform panel",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showPlotter": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Plot panel",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showMetadata": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Metadata panel",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showParameterization": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Parameterization panel",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showStore": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "Prop to define the visibility of the Store panel",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/DataTable.react.js": {
    "description": "Dash DataTable is an interactive table component designed for\nviewing, editing, and exploring large datasets.\nDataTable is rendered with standard, semantic HTML <table/> markup,\nwhich makes it accessible, responsive, and easy to style. This\ncomponent was written from scratch in React.js specifically for the\nDash community. Its API was designed to be ergonomic and its behavior\nis completely customizable through its properties.",
    "displayName": "DataTable",
    "methods": [],
    "props": {
      "data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.objectOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number,\n            PropTypes.bool\n        ])\n    )\n)"
        },
        "required": false,
        "description": "The contents of the table.\nThe keys of each item in data should match the column IDs.\nEach item can also have an 'id' key, whose value is its row ID. If there\nis a column with ID='id' this will display the row ID, otherwise it is\njust used to reference the row for selections, filtering, etc.\nExample:\n[\n     {'column-1': 4.5, 'column-2': 'montreal', 'column-3': 'canada'},\n     {'column-1': 8, 'column-2': 'boston', 'column-3': 'america'}\n]"
      },
      "columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        /**\n         * The `id` of the column.\n         * The column `id` is used to match cells in data with particular columns.\n         * The `id` is not visible in the table.\n         */\n        id: PropTypes.string.isRequired,\n\n        /**\n         * The `name` of the column, as it appears in the column header.\n         * If `name` is a list of strings, then the columns\n         * will render with multiple headers rows.\n         */\n        name: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string)\n        ]).isRequired,\n\n        /**\n         * The data-type provides support for per column typing and allows for data\n         * validation and coercion.\n         * 'numeric': represents both floats and ints.\n         * 'text': represents a string.\n         * 'datetime': a string representing a date or date-time, in the form:\n         *   'YYYY-MM-DD HH:MM:SS.ssssss' or some truncation thereof. Years must\n         *   have 4 digits, unless you use `validation.allow_YY: true`. Also\n         *   accepts 'T' or 't' between date and time, and allows timezone info\n         *   at the end. To convert these strings to Python `datetime` objects,\n         *   use `dateutil.parser.isoparse`. In R use `parse_iso_8601` from the\n         *   `parsedate` library.\n         *   WARNING: these parsers do not work with 2-digit years, if you use\n         *   `validation.allow_YY: true` and do not coerce to 4-digit years.\n         *   And parsers that do work with 2-digit years may make a different\n         *   guess about the century than we make on the front end.\n         * 'any': represents any type of data.\n         * Defaults to 'any' if undefined.\n         *\n         *\n         */\n        type: PropTypes.oneOf(['any', 'numeric', 'text', 'datetime']),\n\n        /**\n         * The `presentation` to use to display data. Markdown can be used on\n         * columns with type 'text'.  See 'dropdown' for more info.\n         * Defaults to 'input' for ['datetime', 'numeric', 'text', 'any'].\n         */\n        presentation: PropTypes.oneOf(['input', 'dropdown', 'markdown']),\n\n        /**\n         * If true, the user can select the column by clicking on the checkbox or radio button\n         * in the column. If there are multiple header rows, true will display the input\n         * on each row.\n         * If `last`, the input will only appear on the last header row. If `first` it will only\n         * appear on the first header row. These are respectively shortcut equivalents to\n         * `[false, ..., false, true]` and `[true, false, ..., false]`.\n         * If there are merged, multi-header columns then you can choose which column header\n         * row to display the input in by supplying an array of booleans.\n         * For example, `[true, false]` will display the `selectable` input on the first row,\n         * but now on the second row.\n         * If the `selectable` input appears on a merged columns, then clicking on that input\n         * will select *all* of the merged columns associated with it.\n         * The table-level prop `column_selectable` is used to determine the type of column\n         * selection to use.\n         *\n         */\n        selectable: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.bool,\n            PropTypes.arrayOf(PropTypes.bool)\n        ]),\n\n        /**\n         * If true, the user can clear the column by clicking on the `clear`\n         * action button on the column. If there are multiple header rows, true\n         * will display the action button on each row.\n         * If `last`, the `clear` action button will only appear on the last header\n         * row. If `first` it will only appear on the first header row. These\n         * are respectively shortcut equivalents to `[false, ..., false, true]` and\n         * `[true, false, ..., false]`.\n         * If there are merged, multi-header columns then you can choose\n         * which column header row to display the `clear` action button in by\n         * supplying an array of booleans.\n         * For example, `[true, false]` will display the `clear` action button\n         * on the first row, but not the second row.\n         * If the `clear` action button appears on a merged column, then clicking\n         * on that button will clear *all* of the merged columns associated with it.\n         * Unlike `column.deletable`, this action does not remove the column(s)\n         * from the table. It only removed the associated entries from `data`.\n         */\n        clearable: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.bool,\n            PropTypes.arrayOf(PropTypes.bool)\n        ]),\n\n        /**\n         * If true, the user can remove the column by clicking on the `delete`\n         * action button on the column. If there are multiple header rows, true\n         * will display the action button on each row.\n         * If `last`, the `delete` action button will only appear on the last header\n         * row. If `first` it will only appear on the first header row. These\n         * are respectively shortcut equivalents to `[false, ..., false, true]` and\n         * `[true, false, ..., false]`.\n         * If there are merged, multi-header columns then you can choose\n         * which column header row to display the `delete` action button in by\n         * supplying an array of booleans.\n         * For example, `[true, false]` will display the `delete` action button\n         * on the first row, but not the second row.\n         * If the `delete` action button appears on a merged column, then clicking\n         * on that button will remove *all* of the merged columns associated with it.\n         */\n        deletable: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.bool,\n            PropTypes.arrayOf(PropTypes.bool)\n        ]),\n\n        /**\n         * There are two `editable` flags in the table.\n         * This is the  column-level editable flag and there is\n         * also the table-level `editable` flag.\n         * These flags determine whether the contents of the table\n         * are editable or not.\n         * If the column-level `editable` flag is set it overrides\n         * the table-level `editable` flag for that column.\n         */\n        editable: PropTypes.bool,\n\n        /**\n         * If true, the user can hide the column by clicking on the `hide`\n         * action button on the column. If there are multiple header rows, true\n         * will display the action button on each row.\n         * If `last`, the `hide` action button will only appear on the last header\n         * row. If `first` it will only appear on the first header row. These\n         * are respectively shortcut equivalents to `[false, ..., false, true]` and\n         * `[true, false, ..., false]`.\n         * If there are merged, multi-header columns then you can choose\n         * which column header row to display the `hide` action button in by\n         * supplying an array of booleans.\n         * For example, `[true, false]` will display the `hide` action button\n         * on the first row, but not the second row.\n         * If the `hide` action button appears on a merged column, then clicking\n         * on that button will hide *all* of the merged columns associated with it.\n         */\n        hideable: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.bool,\n            PropTypes.arrayOf(PropTypes.bool)\n        ]),\n\n        /**\n         * If true, the user can rename the column by clicking on the `rename`\n         * action button on the column. If there are multiple header rows, true\n         * will display the action button on each row.\n         * If `last`, the `rename` action button will only appear on the last header\n         * row. If `first` it will only appear on the first header row. These\n         * are respectively shortcut equivalents to `[false, ..., false, true]` and\n         * `[true, false, ..., false]`.\n         * If there are merged, multi-header columns then you can choose\n         * which column header row to display the `rename` action button in by\n         * supplying an array of booleans.\n         * For example, `[true, false]` will display the `rename` action button\n         * on the first row, but not the second row.\n         * If the `rename` action button appears on a merged column, then clicking\n         * on that button will rename *all* of the merged columns associated with it.\n         */\n        renamable: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.bool,\n            PropTypes.arrayOf(PropTypes.bool)\n        ]),\n\n        /**\n         * There are two `filter_options` props in the table.\n         * This is the column-level filter_options prop and there is\n         * also the table-level `filter_options` prop.\n         * These props determine whether the applicable filter relational\n         * operators will default to `sensitive` or `insensitive` comparison.\n         * If the column-level `filter_options` prop is set it overrides\n         * the table-level `filter_options` prop for that column.\n         */\n        filter_options: PropTypes.shape({\n            case: PropTypes.oneOf(['sensitive', 'insensitive'])\n        }),\n\n        /**\n         * The formatting applied to the column's data.\n         * This prop is derived from the [d3-format](https://github.com/d3/d3-format) library specification. Apart from\n         * being structured slightly differently (under a single prop), the usage is the same.\n         * See also dash_table.FormatTemplate.  It contains helper functions for typical number formats.\n         */\n        format: PropTypes.exact({\n            /**\n             * Represents localization specific formatting information.\n             * When left unspecified, will use the default value provided by d3-format.\n             */\n            locale: PropTypes.exact({\n                /**\n                 * (default: ['$', '']).  A list of two strings representing the\n                 *  prefix and suffix symbols. Typically used for currency, and implemented using d3's\n                 *  currency format, but you can use this for other symbols such as measurement units\n                 */\n                symbol: PropTypes.arrayOf(PropTypes.string),\n                /**\n                 * (default: '.').  The string used for the decimal separator\n                 */\n                decimal: PropTypes.string,\n                /**\n                 * (default: ',').  The string used for the groups separator\n                 */\n                group: PropTypes.string,\n                /**\n                 * (default: [3]).  A list of integers representing the grouping pattern. The default is\n                 * 3 for thousands.\n                 */\n                grouping: PropTypes.arrayOf(PropTypes.number),\n                /**\n                 *  A list of ten strings used as replacements for numbers 0-9\n                 */\n                numerals: PropTypes.arrayOf(PropTypes.string),\n                /**\n                 * (default: '%').  The string used for the percentage symbol\n                 */\n                percent: PropTypes.string,\n                /**\n                 * (default: True). Separates integers with 4-digits or less\n                 */\n                separate_4digits: PropTypes.bool\n            }),\n            /**\n             * A value that will be used in place of the nully value during formatting.\n             *   If the value type matches the column type, it will be formatted normally.\n             */\n            nully: PropTypes.any,\n            /**\n             * A number representing the SI unit to use during formatting.\n             *   See `dash_table.Format.Prefix` enumeration for the list of valid values\n             */\n            prefix: PropTypes.number,\n            /**\n             *  (default: '').  Represents the d3 rules to apply when formatting the number.\n             */\n            specifier: PropTypes.string\n        }),\n\n        /**\n         * The `on_change` behavior of the column for user-initiated modifications.\n         */\n        on_change: PropTypes.exact({\n            /**\n             * (default 'coerce'):  'none': do not validate data;\n             *  'coerce': check if the data corresponds to the destination type and\n             *  attempts to coerce it into the destination type if not;\n             *  'validate': check if the data corresponds to the destination type (no coercion).\n             */\n            action: PropTypes.oneOf(['coerce', 'none', 'validate']),\n            /**\n             *  (default 'reject'):  What to do with the value if the action fails.\n             *  'accept': use the invalid value;\n             *  'default': replace the provided value with `validation.default`;\n             *  'reject': do not modify the existing value.\n             */\n            failure: PropTypes.oneOf(['accept', 'default', 'reject'])\n        }),\n\n        /**\n         * An array of string, number and boolean values that are treated as `null`\n         * (i.e. ignored and always displayed last) when sorting.\n         * This value overrides the table-level `sort_as_null`.\n         */\n        sort_as_null: PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number,\n                PropTypes.bool\n            ])\n        ),\n\n        /**\n         * The `validation` options for user input processing that can accept, reject or apply a\n         * default value.\n         */\n        validation: PropTypes.exact({\n            /**\n             * Allow the use of nully values. (undefined, null, NaN) (default: False)\n             */\n            allow_null: PropTypes.bool,\n            /**\n             * The default value to apply with on_change.failure = 'default'. (default: None)\n             */\n            default: PropTypes.any,\n            /**\n             * This is for `datetime` columns only.  Allow 2-digit years (default: False).\n             *   If True, we interpret years as ranging from now-70 to now+29 - in 2019\n             *   this is 1949 to 2048 but in 2020 it will be different. If used with\n             *   `action: 'coerce'`, will convert user input to a 4-digit year.\n             */\n            allow_YY: PropTypes.bool\n        })\n    })\n)"
        },
        "required": false,
        "description": "Columns describes various aspects about each individual column.\n`name` and `id` are the only required parameters."
      },
      "editable": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True, then the data in all of the cells is editable.\nWhen `editable` is True, particular columns can be made\nuneditable by setting `editable` to `False` inside the `columns`\nproperty.\nIf False, then the data in all of the cells is uneditable.\nWhen `editable` is False, particular columns can be made\neditable by setting `editable` to `True` inside the `columns`\nproperty.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fixed_columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOfType([\n    PropTypes.exact({\n        /**\n         * Example `{'headers':False, 'data':0}` No columns are fixed (the default)\n         */\n\n        data: PropTypes.oneOf([0]),\n        headers: PropTypes.oneOf([false])\n    }),\n\n    PropTypes.exact({\n        /**\n         * Example `{'headers':True, 'data':1}` one column is fixed.\n         */\n\n        data: PropTypes.number,\n        headers: PropTypes.oneOf([true]).isRequired\n    })\n])"
        },
        "required": false,
        "description": "`fixed_columns` will \"fix\" the set of columns so that\nthey remain visible when scrolling horizontally across\nthe unfixed columns. `fixed_columns` fixes columns\nfrom left-to-right.\nIf `headers` is False, no columns are fixed.\nIf `headers` is True, all operation columns (see `row_deletable` and `row_selectable`)\nare fixed. Additional data columns can be fixed by\nassigning a number to `data`.\n\nNote that fixing columns introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.",
        "defaultValue": {
          "value": "{\n    headers: false,\n    data: 0\n}",
          "computed": false
        }
      },
      "fixed_rows": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOfType([\n    PropTypes.exact({\n        /**\n         * Example `{'headers':False, 'data':0}` No rows are fixed (the default)\n         */\n\n        data: PropTypes.oneOf([0]),\n        headers: PropTypes.oneOf([false])\n    }),\n    PropTypes.exact({\n        /**\n         * Example `{'headers':True, 'data':1}` one row is fixed.\n         */\n\n        data: PropTypes.number,\n        headers: PropTypes.oneOf([true]).isRequired\n    })\n])"
        },
        "required": false,
        "description": "`fixed_rows` will \"fix\" the set of rows so that\nthey remain visible when scrolling vertically down\nthe table. `fixed_rows` fixes rows\nfrom top-to-bottom, starting from the headers.\nIf `headers` is False, no rows are fixed.\nIf `headers` is True, all header and filter rows (see `filter_action`) are\nfixed. Additional data rows can be fixed by assigning\na number to `data`.  Note that fixing rows introduces some changes to the\nunderlying markup of the table and may impact the\nway that your columns are rendered or sized.\nView the documentation examples to learn more.",
        "defaultValue": {
          "value": "{\n    headers: false,\n    data: 0\n}",
          "computed": false
        }
      },
      "column_selectable": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['single', 'multi', false])"
        },
        "required": false,
        "description": "If `single`, then the user can select a single column or group\nof merged columns via the radio button that will appear in the\nheader rows.\nIf `multi`, then the user can select multiple columns or groups\nof merged columns via the checkbox that will appear in the header\nrows.\nIf false, then the user will not be able to select columns and no\ninput will appear in the header rows.\nWhen a column is selected, its id will be contained in `selected_columns`\nand `derived_viewport_selected_columns`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "cell_selectable": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True (default), then it is possible to click and navigate\ntable cells.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "row_selectable": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['single', 'multi', false])"
        },
        "required": false,
        "description": "If `single`, then the user can select a single row\nvia a radio button that will appear next to each row.\nIf `multi`, then the user can select multiple rows\nvia a checkbox that will appear next to each row.\nIf false, then the user will not be able to select rows\nand no additional UI elements will appear.\nWhen a row is selected, its index will be contained\nin `selected_rows`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "row_deletable": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True, then a `x` will appear next to each `row`\nand the user can delete the row."
      },
      "active_cell": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\n    row: PropTypes.number,\n    column: PropTypes.number,\n    row_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    column_id: PropTypes.string\n})"
        },
        "required": false,
        "description": "The row and column indices and IDs of the currently active cell.\n`row_id` is only returned if the data rows have an `id` key."
      },
      "selected_cells": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        row: PropTypes.number,\n        column: PropTypes.number,\n        row_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        column_id: PropTypes.string\n    })\n)"
        },
        "required": false,
        "description": "`selected_cells` represents the set of cells that are selected,\nas an array of objects, each item similar to `active_cell`.\nMultiple cells can be selected by holding down shift and\nclicking on a different cell or holding down shift and navigating\nwith the arrow keys.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_rows": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.number)"
        },
        "required": false,
        "description": "`selected_rows` contains the indices of rows that\nare selected via the UI elements that appear when\n`row_selectable` is `'single'` or `'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.string)"
        },
        "required": false,
        "description": "`selected_columns` contains the ids of columns that\nare selected via the UI elements that appear when\n`column_selectable` is `'single' or 'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selected_row_ids": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"
        },
        "required": false,
        "description": "`selected_row_ids` contains the ids of rows that\nare selected via the UI elements that appear when\n`row_selectable` is `'single'` or `'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "start_cell": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\n    row: PropTypes.number,\n    column: PropTypes.number,\n    row_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    column_id: PropTypes.string\n})"
        },
        "required": false,
        "description": "When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n`start_cell` represents the [row, column] coordinates of the cell\nin one of the corners of the region.\n`end_cell` represents the coordinates of the other corner."
      },
      "end_cell": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\n    row: PropTypes.number,\n    column: PropTypes.number,\n    row_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    column_id: PropTypes.string\n})"
        },
        "required": false,
        "description": "When selecting multiple cells\n(via clicking on a cell and then shift-clicking on another cell),\n`end_cell` represents the row / column coordinates and IDs of the cell\nin one of the corners of the region.\n`start_cell` represents the coordinates of the other corner."
      },
      "data_previous": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.object)"
        },
        "required": false,
        "description": "The previous state of `data`. `data_previous`\nhas the same structure as `data` and it will be updated\nwhenever `data` changes, either through a callback or\nby editing the table.\nThis is a read-only property: setting this property will not\nhave any impact on the table."
      },
      "hidden_columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.string)"
        },
        "required": false,
        "description": "List of columns ids of the columns that are currently hidden.\nSee the associated nested prop `columns.hideable`."
      },
      "is_focused": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True, then the `active_cell` is in a focused state."
      },
      "merge_duplicate_headers": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True, then column headers that have neighbors with duplicate names\nwill be merged into a single cell.\nThis will be applied for single column headers and multi-column\nheaders."
      },
      "data_timestamp": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "The unix timestamp when the data was last edited.\nUse this property with other timestamp properties\n(such as `n_clicks_timestamp` in `dash_html_components`)\nto determine which property has changed within a callback."
      },
      "include_headers_on_copy_paste": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If true, headers are included when copying from the table to different\ntabs and elsewhere. Note that headers are ignored when copying from the table onto itself and\nbetween two tables within the same tab.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "export_columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['all', 'visible'])"
        },
        "required": false,
        "description": "Denotes the columns that will be used in the export data file.\nIf `all`, all columns will be used (visible + hidden). If `visible`,\nonly the visible columns will be used. Defaults to `visible`.",
        "defaultValue": {
          "value": "'visible'",
          "computed": false
        }
      },
      "export_format": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['csv', 'xlsx', 'none'])"
        },
        "required": false,
        "description": "Denotes the type of the export data file,\nDefaults to `'none'`",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "export_headers": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['none', 'ids', 'names', 'display'])"
        },
        "required": false,
        "description": "Denotes the format of the headers in the export data file.\nIf `'none'`, there will be no header. If `'display'`, then the header\nof the data file will be be how it is currently displayed. Note that\n`'display'` is only supported for `'xlsx'` export_format and will behave\nlike `'names'` for `'csv'` export format. If `'ids'` or `'names'`,\nthen the headers of data file will be the column id or the column\nnames, respectively"
      },
      "page_action": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['custom', 'native', 'none'])"
        },
        "required": false,
        "description": "`page_action` refers to a mode of the table where\nnot all of the rows are displayed at once: only a subset\nare displayed (a \"page\") and the next subset of rows\ncan viewed by clicking \"Next\" or \"Previous\" buttons\nat the bottom of the page.\nPagination is used to improve performance: instead of\nrendering all of the rows at once (which can be expensive),\nwe only display a subset of them.\nWith pagination, we can either page through data that exists\nin the table (e.g. page through `10,000` rows in `data` `100` rows at a time)\nor we can update the data on-the-fly with callbacks\nwhen the user clicks on the \"Previous\" or \"Next\" buttons.\nThese modes can be toggled with this `page_action` parameter:\n`'native'`: all data is passed to the table up-front, paging logic is\nhandled by the table;\n`'custom'`: data is passed to the table one page at a time, paging logic\nis handled via callbacks;\n`'none'`: disables paging, render all of the data at once.",
        "defaultValue": {
          "value": "'native'",
          "computed": false
        }
      },
      "page_current": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "`page_current` represents which page the user is on.\nUse this property to index through data in your callbacks with\nbackend paging.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "page_count": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "`page_count` represents the number of the pages in the\npaginated table. This is really only useful when performing\nbackend pagination, since the front end is able to use the\nfull size of the table to calculate the number of pages."
      },
      "page_size": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "`page_size` represents the number of rows that will be\ndisplayed on a particular page when `page_action` is `'custom'` or `'native'`",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "filter_query": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "If `filter_action` is enabled, then the current filtering\nstring is represented in this `filter_query`\nproperty.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "filter_action": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOfType([\n    PropTypes.oneOf(['custom', 'native', 'none']),\n    PropTypes.shape({\n        type: PropTypes.oneOf(['custom', 'native']).isRequired,\n        operator: PropTypes.oneOf(['and', 'or'])\n    })\n])"
        },
        "required": false,
        "description": "The `filter_action` property controls the behavior of the `filtering` UI.\nIf `'none'`, then the filtering UI is not displayed.\nIf `'native'`, then the filtering UI is displayed and the filtering\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the `data` property.\nIf `'custom'`, then the filtering UI is displayed but it is the\nresponsibility of the developer to program the filtering\nthrough a callback (where `filter_query` or `derived_filter_query_structure` would be the input\nand `data` would be the output).",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "filter_options": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.shape({\n    case: PropTypes.oneOf(['sensitive', 'insensitive'])\n})"
        },
        "required": false,
        "description": "There are two `filter_options` props in the table.\nThis is the table-level filter_options prop and there is\nalso the column-level `filter_options` prop.\nThese props determine whether the applicable filter relational\noperators will default to `sensitive` or `insensitive` comparison.\nIf the column-level `filter_options` prop is set it overrides\nthe table-level `filter_options` prop for that column.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "sort_action": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['custom', 'native', 'none'])"
        },
        "required": false,
        "description": "The `sort_action` property enables data to be\nsorted on a per-column basis.\nIf `'none'`, then the sorting UI is not displayed.\nIf `'native'`, then the sorting UI is displayed and the sorting\nlogic is handled by the table. That is, it is performed on the data\nthat exists in the `data` property.\nIf `'custom'`, the the sorting UI is displayed but it is the\nresponsibility of the developer to program the sorting\nthrough a callback (where `sort_by` would be the input and `data`\nwould be the output).\nClicking on the sort arrows will update the\n`sort_by` property.",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "sort_mode": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['single', 'multi'])"
        },
        "required": false,
        "description": "Sorting can be performed across multiple columns\n(e.g. sort by country, sort within each country,\n sort by year) or by a single column.\nNOTE - With multi-column sort, it's currently\nnot possible to determine the order in which\nthe columns were sorted through the UI.\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)",
        "defaultValue": {
          "value": "'single'",
          "computed": false
        }
      },
      "sort_by": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        column_id: PropTypes.string.isRequired,\n        direction: PropTypes.oneOf(['asc', 'desc']).isRequired\n    })\n)"
        },
        "required": false,
        "description": "`sort_by` describes the current state\nof the sorting UI.\nThat is, if the user clicked on the sort arrow\nof a column, then this property will be updated\nwith the column ID and the direction\n(`asc` or `desc`) of the sort.\nFor multi-column sorting, this will be a list of\nsorting parameters, in the order in which they were\nclicked.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "sort_as_null": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.bool\n    ])\n)"
        },
        "required": false,
        "description": "An array of string, number and boolean values that are treated as `None`\n(i.e. ignored and always displayed last) when sorting.\nThis value will be used by columns without `sort_as_null`.\nDefaults to `[]`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "dropdown": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.objectOf(\n    PropTypes.exact({\n        clearable: PropTypes.bool,\n        options: PropTypes.arrayOf(\n            PropTypes.exact({\n                label: PropTypes.string.isRequired,\n                value: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.string,\n                    PropTypes.bool\n                ]).isRequired\n            })\n        ).isRequired\n    })\n)"
        },
        "required": false,
        "description": "`dropdown` specifies dropdown options for different columns.\nEach entry refers to the column ID.\nThe `clearable` property defines whether the value can be deleted.\nThe `options` property refers to the `options` of the dropdown.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "dropdown_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        clearable: PropTypes.bool,\n        if: PropTypes.exact({\n            column_id: PropTypes.string,\n            filter_query: PropTypes.string\n        }),\n        options: PropTypes.arrayOf(\n            PropTypes.exact({\n                label: PropTypes.string.isRequired,\n                value: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.string,\n                    PropTypes.bool\n                ]).isRequired\n            })\n        ).isRequired\n    })\n)"
        },
        "required": false,
        "description": "`dropdown_conditional` specifies dropdown options in various columns and cells.\nThis property allows you to specify different dropdowns\ndepending on certain conditions. For example, you may\nrender different \"city\" dropdowns in a row depending on the\ncurrent value in the \"state\" column.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "dropdown_data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.objectOf(\n        PropTypes.exact({\n            clearable: PropTypes.bool,\n            options: PropTypes.arrayOf(\n                PropTypes.exact({\n                    label: PropTypes.string.isRequired,\n                    value: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.bool\n                    ]).isRequired\n                })\n            ).isRequired\n        })\n    )\n)"
        },
        "required": false,
        "description": "`dropdown_data` specifies dropdown options on a row-by-row, column-by-column basis.\nEach item in the array corresponds to the corresponding dropdowns for the `data` item\nat the same index. Each entry in the item refers to the Column ID.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.objectOf(\n    PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.exact({\n            /**\n             * Represents the delay in milliseconds before\n             * the tooltip is shown when hovering a cell. This overrides\n             * the table's `tooltip_delay` property. If set to `None`,\n             * the tooltip will be shown immediately.\n             */\n            delay: PropTypes.number,\n            /**\n             * represents the duration in milliseconds\n             * during which the tooltip is shown when hovering a cell.\n             * This overrides the table's `tooltip_duration` property.\n             * If set to `None`, the tooltip will not disappear.\n             */\n            duration: PropTypes.number,\n            /**\n             * refers to the type of tooltip syntax used\n             * for the tooltip generation. Can either be `markdown`\n             * or `text`. Defaults to `text`.\n             */\n            type: PropTypes.oneOf(['text', 'markdown']),\n            /**\n             * Refers to whether the tooltip will be shown\n             * only on data or headers. Can be `both`, `data`, `header`.\n             * Defaults to `both`.\n             */\n            use_with: PropTypes.oneOf(['both', 'data', 'header']),\n            /**\n             * refers to the syntax-based content of\n             * the tooltip. This value is required. Alternatively, the value of the\n             * property can also be  a plain string. The `text` syntax will be used in\n             * that case.\n             */\n            value: PropTypes.string.isRequired\n        })\n    ])\n)"
        },
        "required": false,
        "description": "`tooltip` is the column based tooltip configuration applied to all rows. The key is the column\n id and the value is a tooltip configuration.\nExample: {i: {'value': i, 'use_with: 'both'} for i in df.columns}",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tooltip_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        /**\n         * The `delay` represents the delay in milliseconds before\n         * the tooltip is shown when hovering a cell. This overrides\n         * the table's `tooltip_delay` property. If set to `None`,\n         * the tooltip will be shown immediately.\n         */\n        delay: PropTypes.number,\n        /**\n         * The `duration` represents the duration in milliseconds\n         * during which the tooltip is shown when hovering a cell.\n         * This overrides the table's `tooltip_duration` property.\n         * If set to `None`, the tooltip will not disappear.\n         */\n        duration: PropTypes.number,\n\n        /**\n         * The `if` refers to the condition that needs to be fulfilled\n         * in order for the associated tooltip configuration to be\n         * used. If multiple conditions are defined, all conditions\n         * must be met for the tooltip to be used by a cell.\n         */\n\n        if: PropTypes.exact({\n            /**\n             * `column_id` refers to the column ID that must be matched.\n             */\n            column_id: PropTypes.string,\n            /**\n             * `filter_query` refers to the query that must evaluate to True.\n             */\n            filter_query: PropTypes.string,\n            /**\n             * `row_index` refers to the index of the row in the source `data`.\n             */\n            row_index: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.oneOf(['odd', 'even'])\n            ])\n        }).isRequired,\n        /**\n         * The `type` refers to the type of tooltip syntax used\n         * for the tooltip generation. Can either be `markdown`\n         * or `text`. Defaults to `text`.\n         */\n        type: PropTypes.oneOf(['text', 'markdown']),\n        /**\n         * The `value` refers to the syntax-based content of the tooltip. This value is required.\n         */\n        value: PropTypes.string.isRequired\n    })\n)"
        },
        "required": false,
        "description": "`tooltip_conditional` represents the tooltip shown\nfor different columns and cells.\nThis property allows you to specify different tooltips\ndepending on certain conditions. For example, you may have\ndifferent tooltips in the same column based on the value\nof a certain data property.\nPriority is from first to last defined conditional tooltip\nin the list. Higher priority (more specific) conditional\ntooltips should be put at the beginning of the list.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip_data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.objectOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.exact({\n                /**\n                 * The `delay` represents the delay in milliseconds before\n                 * the tooltip is shown when hovering a cell. This overrides\n                 * the table's `tooltip_delay` property. If set to `None`,\n                 * the tooltip will be shown immediately.\n                 */\n                delay: PropTypes.number,\n                /**\n                 * The `duration` represents the duration in milliseconds\n                 * during which the tooltip is shown when hovering a cell.\n                 * This overrides the table's `tooltip_duration` property.\n                 * If set to `None`, the tooltip will not disappear.\n                 * Alternatively, the value of the property can also be\n                 * a plain string. The `text` syntax will be used in\n                 * that case.\n                 */\n                duration: PropTypes.number,\n                /**\n                 * For each tooltip configuration,\n                 * The `type` refers to the type of tooltip syntax used\n                 * for the tooltip generation. Can either be `markdown`\n                 * or `text`. Defaults to `text`.\n                 */\n                type: PropTypes.oneOf(['text', 'markdown']),\n                /**\n                 * The `value` refers to the syntax-based content of the tooltip. This value is required.\n                 */\n                value: PropTypes.string.isRequired\n            })\n        ])\n    )\n)"
        },
        "required": false,
        "description": "`tooltip_data` represents the tooltip shown\nfor different columns and cells.\nA list of dicts for which each key is\na column id and the value is a tooltip configuration.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltip_header": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.objectOf(\n    PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.exact({\n            /**\n             * The `delay` represents the delay in milliseconds before\n             * the tooltip is shown when hovering a cell. This overrides\n             * the table's `tooltip_delay` property. If set to `None`,\n             * the tooltip will be shown immediately.\n             */\n            delay: PropTypes.number,\n            /**\n             * The `duration` represents the duration in milliseconds\n             * during which the tooltip is shown when hovering a cell.\n             * This overrides the table's `tooltip_duration` property.\n             * If set to `None`, the tooltip will not disappear.\n             * Alternatively, the value of the property can also be\n             * a plain string. The `text` syntax will be used in\n             * that case.\n             */\n            duration: PropTypes.number,\n            /**\n             * For each tooltip configuration,\n             * The `type` refers to the type of tooltip syntax used\n             * for the tooltip generation. Can either be `markdown`\n             * or `text`. Defaults to `text`.\n             */\n            type: PropTypes.oneOf(['text', 'markdown']),\n            /**\n             * The `value` refers to the syntax-based content of the tooltip. This value is required.\n             */\n            value: PropTypes.string.isRequired\n        }),\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.oneOf([null]),\n                PropTypes.string,\n                PropTypes.exact({\n                    delay: PropTypes.number,\n                    duration: PropTypes.number,\n                    type: PropTypes.oneOf(['text', 'markdown']),\n                    value: PropTypes.string.isRequired\n                })\n            ])\n        )\n    ])\n)"
        },
        "required": false,
        "description": "`tooltip_header` represents the tooltip shown\nfor each header column and optionally each header row.\nExample to show long column names in a tooltip: {i: i for i in df.columns}.\nExample to show different column names in a tooltip: {'Rep': 'Republican', 'Dem': 'Democrat'}.\nIf the table has multiple rows of headers, then use a list as the value of the\n`tooltip_header` items.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tooltip_delay": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "`tooltip_delay` represents the table-wide delay in milliseconds before\nthe tooltip is shown when hovering a cell. If set to `None`, the tooltip\nwill be shown immediately.\nDefaults to 350.",
        "defaultValue": {
          "value": "350",
          "computed": false
        }
      },
      "tooltip_duration": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.number"
        },
        "required": false,
        "description": "`tooltip_duration` represents the table-wide duration in milliseconds\nduring which the tooltip will be displayed when hovering a cell. If\nset to `None`, the tooltip will not disappear.\nDefaults to 2000.",
        "defaultValue": {
          "value": "2000",
          "computed": false
        }
      },
      "locale_format": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\n    /**\n     *   (default: ['$', '']). A  list of two strings representing the\n     *   prefix and suffix symbols. Typically used for currency, and implemented using d3's\n     *   currency format, but you can use this for other symbols such as measurement units.\n     */\n    symbol: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * (default: '.'). The string used for the decimal separator.\n     */\n    decimal: PropTypes.string,\n    /**\n     * (default: ','). The string used for the groups separator.\n     */\n    group: PropTypes.string,\n    /**\n     * (default: [3]). A  list of integers representing the grouping pattern.\n     */\n    grouping: PropTypes.arrayOf(PropTypes.number),\n    /**\n     * A list of ten strings used as replacements for numbers 0-9.\n     */\n    numerals: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * (default: '%'). The string used for the percentage symbol.\n     */\n    percent: PropTypes.string,\n    /**\n     * (default: True). Separate integers with 4-digits or less.\n     */\n    separate_4digits: PropTypes.bool\n})"
        },
        "required": false,
        "description": "The localization specific formatting information applied to all columns in the table.\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\nWhen left unspecified, each individual nested prop will default to a pre-determined value."
      },
      "style_as_list_view": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "If True, then the table will be styled like a list view\nand not have borders between the columns.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fill_width": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "`fill_width` toggles between a set of CSS for two common behaviors:\nTrue: The table container's width will grow to fill the available space;\nFalse: The table container's width will equal the width of its content.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "markdown_options": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.exact({\n    /**\n     * (default: '_blank').  The link's behavior (_blank opens the link in a\n     * new tab, _parent opens the link in the parent frame, _self opens the link in the\n     * current tab, and _top opens the link in the top frame) or a string\n     */\n    link_target: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.oneOf(['_blank', '_parent', '_self', '_top'])\n    ]),\n    /**\n     * (default: False)  If True, html may be used in markdown cells\n     * Be careful enabling html if the content being rendered can come\n     * from an untrusted user, as this may create an XSS vulnerability.\n     */\n    html: PropTypes.bool\n})"
        },
        "required": false,
        "description": "The `markdown_options` property allows customization of the markdown cells behavior.",
        "defaultValue": {
          "value": "{\n    link_target: '_blank',\n    html: false\n}",
          "computed": false
        }
      },
      "css": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.exact({\n        selector: PropTypes.string.isRequired,\n        rule: PropTypes.string.isRequired\n    })\n)"
        },
        "required": false,
        "description": "The `css` property is a way to embed CSS selectors and rules\nonto the page.\nWe recommend starting with the `style_*` properties\nbefore using this `css` property.\nExample:\n[\n    {\"selector\": \".dash-spreadsheet\", \"rule\": 'font-family: \"monospace\"'}\n]",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_table": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "CSS styles to be applied to the outer `table` container.\nThis is commonly used for setting properties like the\nwidth or the height of the table.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style_cell": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual cell of the table.\nThis includes the header cells, the `data` cells, and the filter\ncells."
      },
      "style_data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual data cell.\nThat is, unlike `style_cell`, it excludes the header and filter cells."
      },
      "style_filter": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "CSS styles to be applied to the filter cells.\nNote that this may change in the future as we build out a\nmore complex filtering UI."
      },
      "style_header": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual header cell.\nThat is, unlike `style_cell`, it excludes the `data` and filter cells."
      },
      "style_cell_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.shape({\n        if: PropTypes.exact({\n            column_id: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.arrayOf(PropTypes.string)\n            ]),\n            column_type: PropTypes.oneOf([\n                'any',\n                'numeric',\n                'text',\n                'datetime'\n            ])\n        })\n    })\n)"
        },
        "required": false,
        "description": "Conditional CSS styles for the cells.\nThis can be used to apply styles to cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_data_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.shape({\n        if: PropTypes.exact({\n            column_id: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.arrayOf(PropTypes.string)\n            ]),\n            column_type: PropTypes.oneOf([\n                'any',\n                'numeric',\n                'text',\n                'datetime'\n            ]),\n            filter_query: PropTypes.string,\n            state: PropTypes.oneOf(['active', 'selected']),\n            row_index: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.oneOf(['odd', 'even']),\n                PropTypes.arrayOf(PropTypes.number)\n            ]),\n            column_editable: PropTypes.bool\n        })\n    })\n)"
        },
        "required": false,
        "description": "Conditional CSS styles for the data cells.\nThis can be used to apply styles to data cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_filter_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.shape({\n        if: PropTypes.exact({\n            column_id: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.arrayOf(PropTypes.string)\n            ]),\n            column_type: PropTypes.oneOf([\n                'any',\n                'numeric',\n                'text',\n                'datetime'\n            ]),\n            column_editable: PropTypes.bool\n        })\n    })\n)"
        },
        "required": false,
        "description": "Conditional CSS styles for the filter cells.\nThis can be used to apply styles to filter cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_header_conditional": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.shape({\n        if: PropTypes.exact({\n            column_id: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.arrayOf(PropTypes.string)\n            ]),\n            column_type: PropTypes.oneOf([\n                'any',\n                'numeric',\n                'text',\n                'datetime'\n            ]),\n            header_index: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.arrayOf(PropTypes.number),\n                PropTypes.oneOf(['odd', 'even'])\n            ]),\n            column_editable: PropTypes.bool\n        })\n    })\n)"
        },
        "required": false,
        "description": "Conditional CSS styles for the header cells.\nThis can be used to apply styles to header cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "virtualization": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "This property tells the table to use virtualization when rendering.\nAssumptions are that:\nthe width of the columns is fixed;\nthe height of the rows is always the same; and\nruntime styling changes will not affect width and height vs. first rendering",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "derived_filter_query_structure": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.object"
        },
        "required": false,
        "description": "This property represents the current structure of\n`filter_query` as a tree structure. Each node of the\nquery structure has:\ntype (string; required):\n  'open-block',\n  'logical-operator',\n  'relational-operator',\n  'unary-operator', or\n  'expression';\nsubType (string; optional):\n  'open-block': '()',\n  'logical-operator': '&&', '||',\n  'relational-operator': '=', '>=', '>', '<=', '<', '!=', 'contains',\n  'unary-operator': '!', 'is bool', 'is even', 'is nil', 'is num', 'is object', 'is odd', 'is prime', 'is str',\n  'expression': 'value', 'field';\nvalue (any):\n  'expression, value': passed value,\n  'expression, field': the field/prop name.\nblock (nested query structure; optional).\nleft (nested query structure; optional).\nright (nested query structure; optional).\nIf the query is invalid or empty, the `derived_filter_query_structure` will\nbe `None`."
      },
      "derived_viewport_data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.object)"
        },
        "required": false,
        "description": "This property represents the current state of `data`\non the current page. This property will be updated\non paging, sorting, and filtering.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_indices": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.number)"
        },
        "required": false,
        "description": "`derived_viewport_indices` indicates the order in which the original\nrows appear after being filtered, sorted, and/or paged.\n`derived_viewport_indices` contains indices for the current page,\nwhile `derived_virtual_indices` contains indices across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_row_ids": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"
        },
        "required": false,
        "description": "`derived_viewport_row_ids` lists row IDs in the order they appear\nafter being filtered, sorted, and/or paged.\n`derived_viewport_row_ids` contains IDs for the current page,\nwhile `derived_virtual_row_ids` contains IDs across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_selected_columns": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.string)"
        },
        "required": false,
        "description": "`derived_viewport_selected_columns` contains the ids of the\n`selected_columns` that are not currently hidden."
      },
      "derived_viewport_selected_rows": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.number)"
        },
        "required": false,
        "description": "`derived_viewport_selected_rows` represents the indices of the\n`selected_rows` from the perspective of the `derived_viewport_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_selected_row_ids": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"
        },
        "required": false,
        "description": "`derived_viewport_selected_row_ids` represents the IDs of the\n`selected_rows` on the currently visible page.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_data": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.object)"
        },
        "required": false,
        "description": "This property represents the visible state of `data`\nacross all pages after the front-end sorting and filtering\nas been applied.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_indices": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.number)"
        },
        "required": false,
        "description": "`derived_virtual_indices` indicates the order in which the original\nrows appear after being filtered and sorted.\n`derived_viewport_indices` contains indices for the current page,\nwhile `derived_virtual_indices` contains indices across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_row_ids": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"
        },
        "required": false,
        "description": "`derived_virtual_row_ids` indicates the row IDs in the order in which\nthey appear after being filtered and sorted.\n`derived_viewport_row_ids` contains IDs for the current page,\nwhile `derived_virtual_row_ids` contains IDs across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_selected_rows": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(PropTypes.number)"
        },
        "required": false,
        "description": "`derived_virtual_selected_rows` represents the indices of the\n `selected_rows` from the perspective of the `derived_virtual_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_selected_row_ids": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"
        },
        "required": false,
        "description": "`derived_virtual_selected_row_ids` represents the IDs of the\n`selected_rows` as they appear after filtering and sorting,\nacross all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID of the table."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the user makes changes."
      },
      "loading_state": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.shape({\n    /**\n     * Determines if the component is loading or not\n     */\n    is_loading: PropTypes.bool,\n    /**\n     * Holds which property is loading\n     */\n    prop_name: PropTypes.string,\n    /**\n     * Holds the name of the component that is loading\n     */\n    component_name: PropTypes.string\n})"
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "persistence": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n    PropTypes.number\n])"
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, any `persisted_props` that the\nuser has changed while using the app will keep those changes, as long as\nthe new prop value also matches what was given originally.\nUsed in conjunction with `persistence_type` and `persisted_props`."
      },
      "persisted_props": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.arrayOf(\n    PropTypes.oneOf([\n        'columns.name',\n        'data',\n        'filter_query',\n        'hidden_columns',\n        'page_current',\n        'selected_columns',\n        'selected_rows',\n        'sort_by'\n    ])\n)"
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\n    'columns.name',\n    'filter_query',\n    'hidden_columns',\n    'page_current',\n    'selected_columns',\n    'selected_rows',\n    'sort_by'\n]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.oneOf(['local', 'session', 'memory'])"
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "'local'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Filter.react.js": {
    "description": "",
    "displayName": "Filter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filter_to_string",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_filter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Graph.react.js": {
    "description": "Graph can be used to render any plotly.js-powered data visualization.\n\nYou can define callbacks based on user interaction with Graphs such as\nhovering, clicking or selecting",
    "displayName": "PlotlyGraph",
    "methods": [
      {
        "name": "sendSavedData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "image",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "saveClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "sendEditData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "image",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "editClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "clearState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dataKey",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "responsive": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If True, the Plotly.js plot will be fully responsive to window resize\nand parent element resize event. This is achieved by overriding\n`config.responsive` to True, `figure.layout.autosize` to True and unsetting\n`figure.layout.height` and `figure.layout.width`.\nIf False, the Plotly.js plot not be responsive to window resize and\nparent element resize event. This is achieved by overriding `config.responsive`\nto False and `figure.layout.autosize` to False.\nIf 'auto' (default), the Graph will determine if the Plotly.js plot can be made fully\nresponsive (True) or not (False) based on the values in `config.responsive`,\n`figure.layout.autosize`, `figure.layout.height`, `figure.layout.width`.\nThis is the legacy behavior of the Graph component.\n\nNeeds to be combined with appropriate dimension / styling through the `style` prop\nto fully take effect.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "defParams": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Metadata to describe the plot features"
      },
      "configuratorId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "id of the plotter  if a reload of the connfig should be allowed"
      },
      "clickData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clickAnnotationData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click annotation event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "hoverData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest hover event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clear_on_unhover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, `clear_on_unhover` will clear the `hoverData` property\nwhen the user \"unhovers\" from a point.\nIf False, then the `hoverData` property will be equal to the\ndata from the last point that was hovered over.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest select event. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "relayoutData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form `{<attr string>: <value>}`\ndescribing the changes made. Read-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "extendData": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Data that should be appended to existing traces. Has the form\n`[updateData, traceIndices, maxPoints]`, where `updateData` is an object\ncontaining the data to extend, `traceIndices` (optional) is an array of\ntrace indices that should be extended, and `maxPoints` (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching `updateData`\nReference the Plotly.extendTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyextendtraces",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "prependData": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "array"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Data that should be prepended to existing traces. Has the form\n`[updateData, traceIndices, maxPoints]`, where `updateData` is an object\ncontaining the data to prepend, `traceIndices` (optional) is an array of\ntrace indices that should be prepended, and `maxPoints` (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching `updateData`\nReference the Plotly.prependTraces API for full usage:\nhttps://plotly.com/javascript/plotlyjs-function-reference/#plotlyprependtraces",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "restyleData": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Data from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form `[edits, indices]`, where `edits` is an object\n`{<attr string>: <value>}` describing the changes made,\nand `indices` is an array of trace indices that were edited.\nRead-only.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "exact",
          "value": {
            "data": {
              "name": "arrayOf",
              "value": {
                "name": "object"
              },
              "required": false
            },
            "layout": {
              "name": "object",
              "required": false
            },
            "frames": {
              "name": "arrayOf",
              "value": {
                "name": "object"
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plotly.com/javascript/reference\n\n`config` is set separately by the `config` property",
        "defaultValue": {
          "value": "{\n    data: [],\n    layout: {},\n    frames: [],\n}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div"
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Beta: If true, animate between updates using\nplotly.js's `animate` function",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animation_options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Beta: Object containing animation settings.\nOnly applies if `animate` is `true`",
        "defaultValue": {
          "value": "{\n    frame: {\n        redraw: false,\n    },\n    transition: {\n        duration: 750,\n        ease: 'cubic-in-out',\n    },\n}",
          "computed": false
        }
      },
      "config": {
        "type": {
          "name": "exact",
          "value": {
            "staticPlot": {
              "name": "bool",
              "description": "No interactivity, for export or image generation",
              "required": false
            },
            "plotlyServerURL": {
              "name": "string",
              "description": "Base URL for a Plotly cloud instance, if `showSendToCloud` is enabled",
              "required": false
            },
            "editable": {
              "name": "bool",
              "description": "We can edit titles, move annotations, etc - sets all pieces of `edits`\nunless a separate `edits` config item overrides individual parts",
              "required": false
            },
            "edits": {
              "name": "exact",
              "value": {
                "annotationPosition": {
                  "name": "bool",
                  "description": "The main anchor of the annotation, which is the\ntext (if no arrow) or the arrow (which drags the whole thing leaving\nthe arrow length & direction unchanged)",
                  "required": false
                },
                "annotationTail": {
                  "name": "bool",
                  "description": "Just for annotations with arrows, change the length and direction of the arrow",
                  "required": false
                },
                "annotationText": {
                  "name": "bool",
                  "required": false
                },
                "axisTitleText": {
                  "name": "bool",
                  "required": false
                },
                "colorbarPosition": {
                  "name": "bool",
                  "required": false
                },
                "colorbarTitleText": {
                  "name": "bool",
                  "required": false
                },
                "legendPosition": {
                  "name": "bool",
                  "required": false
                },
                "legendText": {
                  "name": "bool",
                  "description": "Edit the trace name fields from the legend",
                  "required": false
                },
                "shapePosition": {
                  "name": "bool",
                  "required": false
                },
                "titleText": {
                  "name": "bool",
                  "description": "The global `layout.title`",
                  "required": false
                }
              },
              "description": "A set of editable properties",
              "required": false
            },
            "autosizable": {
              "name": "bool",
              "description": "DO autosize once regardless of layout.autosize\n(use default width or height values otherwise)",
              "required": false
            },
            "responsive": {
              "name": "bool",
              "description": "Whether to change layout size when the window size changes",
              "required": false
            },
            "queueLength": {
              "name": "number",
              "description": "Set the length of the undo/redo queue",
              "required": false
            },
            "fillFrame": {
              "name": "bool",
              "description": "If we DO autosize, do we fill the container or the screen?",
              "required": false
            },
            "frameMargins": {
              "name": "number",
              "description": "If we DO autosize, set the frame margins in percents of plot size",
              "required": false
            },
            "scrollZoom": {
              "name": "bool",
              "description": "Mousewheel or two-finger scroll zooms the plot",
              "required": false
            },
            "doubleClick": {
              "name": "enum",
              "value": [
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'reset'",
                  "computed": false
                },
                {
                  "value": "'autosize'",
                  "computed": false
                },
                {
                  "value": "'reset+autosize'",
                  "computed": false
                }
              ],
              "description": "Double click interaction (false, 'reset', 'autosize' or 'reset+autosize')",
              "required": false
            },
            "doubleClickDelay": {
              "name": "number",
              "description": "Delay for registering a double-click event in ms. The\nminimum value is 100 and the maximum value is 1000. By\ndefault this is 300.",
              "required": false
            },
            "showTips": {
              "name": "bool",
              "description": "New users see some hints about interactivity",
              "required": false
            },
            "showAxisDragHandles": {
              "name": "bool",
              "description": "Enable axis pan/zoom drag handles",
              "required": false
            },
            "showAxisRangeEntryBoxes": {
              "name": "bool",
              "description": "Enable direct range entry at the pan/zoom drag points\n(drag handles must be enabled above)",
              "required": false
            },
            "showLink": {
              "name": "bool",
              "description": "Link to open this plot in plotly",
              "required": false
            },
            "sendData": {
              "name": "bool",
              "description": "If we show a link, does it contain data or just link to a plotly file?",
              "required": false
            },
            "linkText": {
              "name": "string",
              "description": "Text appearing in the sendData link",
              "required": false
            },
            "displayModeBar": {
              "name": "enum",
              "value": [
                {
                  "value": "true",
                  "computed": false
                },
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'hover'",
                  "computed": false
                }
              ],
              "description": "Display the mode bar (true, false, or 'hover')",
              "required": false
            },
            "showSendToCloud": {
              "name": "bool",
              "description": "Should we include a modebar button to send this data to a\nPlotly Cloud instance, linked by `plotlyServerURL`.\nBy default this is false.",
              "required": false
            },
            "showEditInChartStudio": {
              "name": "bool",
              "description": "Should we show a modebar button to send this data to a\nPlotly Chart Studio plot. If both this and showSendToCloud\nare selected, only showEditInChartStudio will be\nhonored. By default this is false.",
              "required": false
            },
            "modeBarButtonsToRemove": {
              "name": "array",
              "description": "Remove mode bar button by name.\nAll modebar button names at https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\nCommon names include:\nsendDataToCloud;\n(2D) zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d;\n(Cartesian) hoverClosestCartesian, hoverCompareCartesian;\n(3D) zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d;\n(Geo) zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo;\nhoverClosestGl2d, hoverClosestPie, toggleHover, resetViews.",
              "required": false
            },
            "modeBarButtonsToAdd": {
              "name": "array",
              "description": "Add mode bar button using config objects",
              "required": false
            },
            "modeBarButtons": {
              "name": "any",
              "description": "Fully custom mode bar buttons as nested array,\nwhere the outer arrays represents button groups, and\nthe inner arrays have buttons config objects or names of default buttons",
              "required": false
            },
            "toImageButtonOptions": {
              "name": "exact",
              "value": {
                "format": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'jpeg'",
                      "computed": false
                    },
                    {
                      "value": "'png'",
                      "computed": false
                    },
                    {
                      "value": "'webp'",
                      "computed": false
                    },
                    {
                      "value": "'svg'",
                      "computed": false
                    }
                  ],
                  "description": "The file format to create",
                  "required": false
                },
                "filename": {
                  "name": "string",
                  "description": "The name given to the downloaded file",
                  "required": false
                },
                "width": {
                  "name": "number",
                  "description": "Width of the downloaded file, in px",
                  "required": false
                },
                "height": {
                  "name": "number",
                  "description": "Height of the downloaded file, in px",
                  "required": false
                },
                "scale": {
                  "name": "number",
                  "description": "Extra resolution to give the file after\nrendering it with the given width and height",
                  "required": false
                }
              },
              "description": "Modifications to how the toImage modebar button works",
              "required": false
            },
            "displaylogo": {
              "name": "bool",
              "description": "Add the plotly logo on the end of the mode bar",
              "required": false
            },
            "watermark": {
              "name": "bool",
              "description": "Add the plotly logo even with no modebar",
              "required": false
            },
            "plotGlPixelRatio": {
              "name": "number",
              "description": "Increase the pixel ratio for Gl plot images",
              "required": false
            },
            "topojsonURL": {
              "name": "string",
              "description": "URL to topojson files used in geo charts",
              "required": false
            },
            "mapboxAccessToken": {
              "name": "any",
              "description": "Mapbox access token (required to plot mapbox trace types)\nIf using an Mapbox Atlas server, set this option to '',\nso that plotly.js won't attempt to authenticate to the public Mapbox server.",
              "required": false
            },
            "locale": {
              "name": "string",
              "description": "The locale to use. Locales may be provided with the plot\n(`locales` below) or by loading them on the page, see:\nhttps://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization",
              "required": false
            },
            "locales": {
              "name": "object",
              "description": "Localization definitions, if you choose to provide them with the\nplot rather than registering them globally.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Plotly.js config options.\nSee https://plotly.com/javascript/configuration-options/\nfor more info.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    },
    "composes": [
      "../fragments/Graph.privateprops"
    ]
  },
  "src/lib/components/Localstore.react.js": {
    "description": "",
    "displayName": "Localstore",
    "methods": [
      {
        "name": "getStore",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveStore",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_store",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLoadClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleLoadShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_load_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/MetaCheck.react.js": {
    "description": "",
    "displayName": "MetaCheck",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Parametrize.react.js": {
    "description": "",
    "displayName": "Parametrize",
    "methods": [
      {
        "name": "handleAddClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleAddShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "saveParams",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_parameters",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_add_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_col_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "col",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_manual_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "path",
            "type": null
          },
          {
            "name": "value",
            "type": null
          },
          {
            "name": "type",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_parameter_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Plotter.react.js": {
    "description": "",
    "displayName": "Plotter",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Transform.react.js": {
    "description": "",
    "displayName": "Transform",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_transform_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "get_modal_blocks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/BarCount.react.js": {
    "description": "",
    "displayName": "BarCount",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Box.react.js": {
    "description": "",
    "displayName": "Box",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/HistogramLine.react.js": {
    "description": "",
    "displayName": "HistogramLine",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Imshow.react.js": {
    "description": "",
    "displayName": "Imshow",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/PlotterBase.react.js": {
    "description": "",
    "displayName": "PlotterBase",
    "methods": [
      {
        "name": "copy_params",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "typename",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "init_check_options",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "base_config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "preferSimple",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "o",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setStateConfig",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "multiSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "singleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "singleSelect_ExtraOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "range_ManualInputArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "option_varnames",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "range_ManualString",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          },
          {
            "name": "varname",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggle_single",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "bar_option",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toggle_optionsbar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "optionsbar",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "optionsBar",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionsbar",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "commonOptionBarControlls",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "numOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available options without grouping"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Probability.react.js": {
    "description": "",
    "displayName": "Probability",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Scatter.react.js": {
    "description": "",
    "displayName": "Scatter",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/ScatterMatrix.react.js": {
    "description": "",
    "displayName": "ScatterMatrix",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Table.react.js": {
    "description": "",
    "displayName": "Table",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/plot/Violin.react.js": {
    "description": "",
    "displayName": "Violin",
    "methods": [
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/sub/Base.react.js": {
    "description": "",
    "displayName": "Base",
    "methods": [
      {
        "name": "update_meta_out",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_meta_out",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "update_config",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "new_config",
            "type": null
          },
          {
            "name": "constructor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_get_grColOpts",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "meta",
            "type": null
          },
          {
            "name": "options",
            "type": null
          },
          {
            "name": "grouping",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_columns",
        "docblock": "A helper to compute the column dropdown options based on the column metadata\nWe also filter continous and categorical variables, since some options only\nwork with one of them.\n@param meta \n@returns",
        "modifiers": [],
        "params": [
          {
            "name": "meta",
            "description": null,
            "type": null,
            "optional": false
          }
        ],
        "returns": null,
        "description": "A helper to compute the column dropdown options based on the column metadata\nWe also filter continous and categorical variables, since some options only\nwork with one of them."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "meta_out": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The metadata section will create as output."
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/sub/CombinecatTransform.react.js": {
    "description": "",
    "displayName": "CombinecatTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/sub/EvalTransform.react.js": {
    "description": "",
    "displayName": "EvalTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/sub/MeltTransform.react.js": {
    "description": "",
    "displayName": "MeltTransform",
    "methods": [
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/sub/SubComponentBase.js": {
    "description": "",
    "displayName": "SubComponentBase",
    "methods": [
      {
        "name": "setStateConfig",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_from_state",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "input",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "config_to_string",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "eval",
        "docblock": "use the config to compute a new transformed meta\n@param {} input \n@returns",
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "input"
          }
        ],
        "returns": null,
        "description": "use the config to compute a new transformed meta"
      },
      {
        "name": "get_dummy_meta_entry",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "type",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "get_col_or_median",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "el",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "config": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any"
        },
        "required": false,
        "description": "The config the user sets in this component."
      },
      "meta": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "The metadata this section is based on."
      },
      "allColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "All currently available column options"
      },
      "catColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available categorical options"
      },
      "numColOptions": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.any.isRequired"
        },
        "required": false,
        "description": "Currently available numerical options"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  }
}